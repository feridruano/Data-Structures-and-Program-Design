import java.util.EmptyStackException;/** * A class of stacks whose entries are stored in an array. * * @author Ferid Ruano * @version 02/16/2019 */public final class ArrayStack< T > implements TextbookStackInterface< T >{    // TODO PROJECT #2 - be sure to examine the hand-written example in the lab description    private T[] myStack;    // array of myStack entries    private int topIndex; // index of top entry    private boolean initialized = false;    private static final int DEFAULT_CAPACITY = 50;    private static final int MAX_CAPACITY = 10000;    /**     * Default Constructor.     */    public ArrayStack()    {        // TODO PROJECT #2 - Done        this( DEFAULT_CAPACITY ); // Call secondary constructor    } // end default constructor    /**     * Secondary Constructor.     *     * @param initialCapacity To set array capacity.     */    public ArrayStack( int initialCapacity )    {        // TODO PROJECT #2 - Done        checkCapacity( initialCapacity );        @SuppressWarnings( "unchecked" )        T[] tempStack = ( T[] ) new Object[initialCapacity];        this.myStack = tempStack;        this.topIndex = initialCapacity;        this.initialized = true;    } // end constructor    /**     * Push an entry onto the stack array.     *     * @param newEntry Entry to push onto stack.     */    public void push( T newEntry )    {        // TODO PROJECT #2 - Done        checkInitialization();        ensureCapacity(); // If myStack is full, double its size        this.myStack[this.topIndex - 1] = newEntry; // Add 'newEntry'        this.topIndex--; // Decrement topIndex    } // end push    /**     * View top entry on stack array.     *     * @return Entry at the top of stack array.     */    public T peek() throws InsufficientNumberOfElementsOnStackException    {        // TODO PROJECT #2 - Done        checkInitialization();        if ( isEmpty() )            throw new InsufficientNumberOfElementsOnStackException( "peek operation failed" );        return this.myStack[topIndex];    } // end peek    /**     * Pop top entry on stack.     *     * @return Removed entry.     */    public T pop() throws InsufficientNumberOfElementsOnStackException    {        // TODO PROJECT #2 - Done        checkInitialization();        if ( isEmpty() )            throw new InsufficientNumberOfElementsOnStackException( "pop operation failed" );        T result = this.myStack[topIndex]; // Store topIndex value        this.myStack[topIndex] = null; // Set topIndex to null        this.topIndex++; // Increment topIndex        return result;    } // end pop    /**     * Check if stack array is empty.     */    public boolean isEmpty()    {        // TODO PROJECT #2 - Done        return this.topIndex >= this.myStack.length;    } // end isEmpty    /**     * Clear stack array entries.     */    public void clear()    {        // TODO PROJECT #2 - Done        checkInitialization();        this.topIndex = this.myStack.length;    } // end clear    /**     * Check if stack array is initialized.     * Throws an exception if this object is not initialized.     */    private void checkInitialization() throws SecurityException    {        // TODO PROJECT #2 - Done        if ( !this.initialized )            throw new SecurityException( "Uninitialized object used to call an ArrayBag method." );    } // end checkInitialization    /**     * Check if stack array is full.     * // Throws an exception if the client requests a capacity that is too large.     *     * @param capacity Capacity of new stack array.     */    private void checkCapacity( int capacity ) throws IllegalStateException    {        // TODO PROJECT #2 - Done        if ( capacity > MAX_CAPACITY )            throw new IllegalStateException( "Attempt to create a bag whose capacity exceeds " +                                             "allowed maximum of " + MAX_CAPACITY );    } // end checkCapacity    /**     * Doubles the size of the array myStack if it is full     * Precondition: checkInitialization has been called.     */    private void ensureCapacity()    {        // TODO PROJECT #2 - Done        checkInitialization();        if ( topIndex == 0 )        {            int newLength = 2 * this.myStack.length; // Double the length            @SuppressWarnings( "unchecked" )            T[] tempStack = ( T[] ) new Object[newLength];            int newTopIndex = newLength; // Copy used to decrement            topIndex = this.myStack.length; // Reset topIndex            // Add entries back onto new array            while ( this.topIndex > 0 )            {                newTopIndex--; // Decrement tempIndex                this.topIndex--; // Decrement topIndex                tempStack[newTopIndex] = this.myStack[this.topIndex];            }            this.topIndex = newTopIndex; // Set topIndex            this.myStack = tempStack; // Set myStack to tempStack            System.out.printf( "-----> The stack capacity has been doubled and it is now: %d; with topIndex = %d%n", newLength, this.topIndex );        }    } // end ensureCapacity    // These methods are only for testing of the array implementation    // and are fully implemented    public int getTopIndex()    {        return this.topIndex;    }    public int getCapacity() { return this.myStack.length; }    public static void main( String[] args )    {        System.out.println( "*** Creating a stack with default constructor ***" );        TextbookStackInterface< String > defaultStack = new ArrayStack<>();        System.out.println( "---> The stack capacity is set by the constructor to: " + defaultStack.getCapacity() );        System.out.println( "---> The topIndex is: " + defaultStack.getTopIndex() );        System.out.println( "\n---> isEmpty() returns " + defaultStack.isEmpty() );        int topLocation = defaultStack.getTopIndex();        int capacity = defaultStack.getCapacity();        if ( topLocation == capacity )            System.out.println( "CORRECT - the top index is set to " + capacity );        else            System.out.println( "INCORRECT - the top index is set to " + topLocation );        System.out.println( "\n---> Adding to stack to get: " +                            "Joe Jane Jill Jess Jim" );        defaultStack.push( "Jim" );        defaultStack.push( "Jess" );        defaultStack.push( "Jill" );        defaultStack.push( "Jane" );        defaultStack.push( "Joe" );        System.out.println( "---> Done adding 5 elements; the topIndex is: " + defaultStack.getTopIndex() );        System.out.println( "---> isEmpty() returns " + defaultStack.isEmpty() );        System.out.println( "\n--> Testing peek and pop:" );        while ( !defaultStack.isEmpty() )        {            String top = defaultStack.peek();            System.out.println( top + " is at the top of the stack." );            top = defaultStack.pop();            System.out.println( top + " is removed from the stack." );        } // end while        System.out.println( "--> The stack should be empty: " );        System.out.println( "isEmpty() returns " + defaultStack.isEmpty() );        System.out.println( "\n--> Adding to stack to get: " +                            "Jim Jess Joe" );        defaultStack.push( "Joe" );        defaultStack.push( "Jess" );        defaultStack.push( "Jim" );        System.out.println( "---> Done adding 3 elements; the topIndex is: " + defaultStack.getTopIndex() );        System.out.println( "\n--> Testing clear:" );        defaultStack.clear();        System.out.println( "--> The stack should be empty: " );        System.out.println( "isEmpty() returns " + defaultStack.isEmpty() );        try        {            System.out.println( "defaultStack.peek() returns: " );            System.out.println( defaultStack.peek() );        }        catch ( InsufficientNumberOfElementsOnStackException inoeose )        {            System.out.println( " CORRECT - exception has been thrown: " + inoeose.getMessage() );        }        try        {            System.out.println( "defaultStack.pop() returns: " );            System.out.println( defaultStack.pop() );        }        catch ( InsufficientNumberOfElementsOnStackException inoeose )        {            System.out.println( " CORRECT - exception has been thrown: " + inoeose.getMessage() );        }        System.out.println( "\n\n*** Creating a stack with the secondary constructor ***" );        TextbookStackInterface< String > smallStack = new ArrayStack<>( 3 );        System.out.println( "---> The stack capacity is set by the constructor to: " + smallStack.getCapacity() );        System.out.println( "---> The topIndex is: " + smallStack.getTopIndex() );        System.out.println( "\n--> isEmpty() returns " + smallStack.isEmpty() );        System.out.println( "\n--> Adding to stack to get: " +                            "Joe Jane Jill Jess Jim" );        smallStack.push( "Jim" );        smallStack.push( "Jess" );        smallStack.push( "Jill" );        smallStack.push( "Jane" );        smallStack.push( "Joe" );        System.out.println( "---> Done adding 5 elements; the topIndex is: " + smallStack.getTopIndex() );        System.out.println( "--> isEmpty() returns " + smallStack.isEmpty() );        System.out.println( "\n-->Testing peek and pop:" );        while ( !smallStack.isEmpty() )        {            String top = smallStack.peek();            System.out.println( top + " is at the top of the stack." );            top = smallStack.pop();            System.out.println( top + " is removed from the stack." );        } // end while        System.out.println( "--> The stack should be empty: " );        System.out.println( "isEmpty() returns " + smallStack.isEmpty() );        topLocation = smallStack.getTopIndex();        capacity = smallStack.getCapacity();        if ( topLocation == capacity )            System.out.println( "CORRECT - the top index is set to " + capacity );        else            System.out.println( "INCORRECT - the top index is set to " + topLocation );        System.out.println( "\n--> Adding to stack to get: " +                            "Jim Jess Joe" );        smallStack.push( "Joe" );        smallStack.push( "Jess" );        smallStack.push( "Jim" );        System.out.println( "---> Done adding 3 elements; the topIndex is: " + smallStack.getTopIndex() );        System.out.println( "\n--> Testing clear:" );        smallStack.clear();        System.out.println( "--> The stack should be empty: " );        System.out.println( "isEmpty() returns " + smallStack.isEmpty() );        try        {            System.out.println( "smallStack.peek() returns: " );            System.out.println( smallStack.peek() );        }        catch ( InsufficientNumberOfElementsOnStackException inoeose )        {            System.out.println( " CORRECT - exception has been thrown: " + inoeose.getMessage() );        }        try        {            System.out.println( "smallStack.pop() returns: " );            System.out.println( smallStack.pop() );        }        catch ( InsufficientNumberOfElementsOnStackException inoeose )        {            System.out.println( " CORRECT - exception has been thrown: " + inoeose.getMessage() );        }        System.out.println( "*** Done ***" );    } // end main} // end ArrayStack