/** * A class that implements the ADT set by using a ResizableArrayBag. * * @author Ferid Ruano * @version 2/1/2019 */public class ArraySetWithResizableArrayBag< T extends Comparable< ? super T > > implements SetInterface< T >{    private ResizableArrayBag< T > setOfEntries;    /**     * Default Constructor     */    public ArraySetWithResizableArrayBag()    {        //TODO Project1 - Done        this.setOfEntries = new ResizableArrayBag<>(); // Default Capacity of 3    } // end default constructor    /**     * Secondary Constructor     *     * @param capacity The length of ResizableArrayBag     */    public ArraySetWithResizableArrayBag( int capacity )    {        //TODO Project1 - Done        // Calls second constructor of ResizeableArrayBag to set custom capacity        this.setOfEntries = new ResizableArrayBag<>( capacity );    } // end of secondary constructor    /**     * Third Constructor     *     * @param contents Array with predefined elements.     */    public ArraySetWithResizableArrayBag( T[] contents )    {        //TODO Project1 - Done        this( contents.length ); // Creates a ResizeableArrayBag object with custom capacity        for ( T entry : contents )            if ( entry != null )                add( entry );    } // End third constructor    /**     * Clears this.setOfEntries     */    public void clear()    {        this.setOfEntries.clear();    } // end clear    /**     * Add element to this.setOfEntries.     * Check if newEntry is null or if entry exists.     *     * @param newEntry The new entry to add.     * @return Successful addition.     */    public boolean add( T newEntry )    {        //TODO Project1 - Done        // Check for null and duplicate        if ( newEntry != null && !this.setOfEntries.contains( newEntry ) )            this.setOfEntries.add( newEntry ); // Calls add(T newEntry) in ResizeableArrayBag which also increases the numberOfEntries        return true;    } // end add    /**     * Removes a specific entry from this.setOfEntries     *     * @param anEntry Specific entry to remove.     * @return True if the removal was successful, or false if not.     */    public boolean removeElement( T anEntry )    {        //TODO Project1 - Done        return this.setOfEntries.removeElement( anEntry ); // Calls removeElement(T anElement) in ResizeableArrayBag    } // end remove    /**     * Remove last entry from this.setOfEntries     */    public T remove()    {        //TODO Project1 - Done        return this.setOfEntries.remove(); // Calls remove() in ResizeableArrayBag    } // end remove    /**     * Check this.setOfEntries for a specific entry.     *     * @param anEntry Specific entry to look for.     * @return True if this bag contains anEntry, or false otherwise.     */    public boolean contains( T anEntry )    {        //TODO Project1 - Done        return this.setOfEntries.contains( anEntry ); // Calls contains(T anEntry) in ResizeableArrayBag    } // end contains    /**     * Gets the number of entries in this.setOfEntries     *     * @return Number of entries in set.     */    public int getCurrentSize()    {        //TODO Project1 - Done        return this.setOfEntries.getCurrentSize(); // Calls getCurrentSize() in ResizeableArrayBag    } // end getCurrentSize    /**     * Checks if this.setOfEntries contains no entries.     *     * @return True if this bag is empty, or false if not.     */    public boolean isEmpty()    {        //TODO Project1 - Done        return this.setOfEntries.isEmpty(); // Calls isEmpty() in ResizeableArrayBag    } // end getLength    /**     * Converts this.setOfEntries to a generic T array.     *     * @return A newly allocated array of all the entries in this bag.     */    public T[] toArray()    {        //TODO Project1 - Done        return this.setOfEntries.toArray(); // Calls toArray() in ResizeableArrayBag    } // end toArray    // Displays a set.    // If the set is empty displays a message that the set is empty    // if the set is not empty displays the number of elements and the content of the set    public void displaySet()    {        //TODO Project1 - Done        if ( isEmpty() )            System.out.println( "The set is empty" );        else        {            T[] toArray = toArray();            System.out.print( "There are " + getCurrentSize() + " string(s): " );            for ( T entry : toArray )                System.out.print( entry + " " );            System.out.println();        }    } // end displaySet    public static void main( String[] args )    {        String[] inputData = { "A", "B", "C", "D", "A", "C", "B", "B" };        System.out.println( "--> Creating aSet with the secondary constructor - capacity of " + inputData.length );        SetInterface< String > aSet = new ArraySetWithResizableArrayBag<>( inputData.length );        System.out.println( "--> Adding elements from inputData to aSet" );        for ( int i = 0; i < inputData.length; i++ )            aSet.add( inputData[i] );        aSet.displaySet();        System.out.println( "\n--> Clearing aSet" );        aSet.clear();        aSet.displaySet();        System.out.println( "--> aSet isEmpty returns \n" + aSet.isEmpty() );        System.out.println( "--> The number of elements in aSet is \n" + aSet.getCurrentSize() );        System.out.println( "\n--> Creating set1 with default constructor" );        SetInterface< String > set1 = new ArraySetWithResizableArrayBag<>();        // Initial capacity is 3        System.out.println( "--> set1 initially empty" );        set1.displaySet();        System.out.println( "\n--> Adding elements to set1" );        set1.add( "A" );        set1.add( "A" );        set1.add( "B" );        set1.add( "A" );        set1.add( "C" );        set1.add( "A" );        System.out.println( "--> set1 after adding elements" );        set1.displaySet();        System.out.println( "\n--> Adding elements to set1" );        set1.add( "V" );        set1.add( "V" );        set1.add( "T" );        set1.add( "U" );        set1.add( "V" );        set1.add( "W" );        set1.add( "X" );        set1.add( "Y" );        set1.add( "Z" );        System.out.println( "\n--> set1 after adding more elements" );        set1.displaySet();        System.out.println( "\n--> set1 contains \"A\":\n" + set1.contains( "A" ) );        System.out.println( "--> set1 contains \"E\":\n" + set1.contains( "E" ) );        System.out.println( "\n--> Removing \"B\" from set1" );        set1.removeElement( "B" );        System.out.println( "--> After removing \"B\" from set1:" );        set1.displaySet();        System.out.println( "--> Removing random element from set1" );        System.out.println( "--> After removing \"" + set1.remove()                            + "\" from set1:" );        set1.displaySet();        System.out.println( "\n--> Trying to remove \"Q\" from set1" );        set1.removeElement( "Q" );        System.out.println( "--> After trying to remove non-existent element \"Q\" from set1:" );        set1.displaySet();        System.out.println( "\n--> Adding 4 elements to set1" );        set1.add( "K" );        set1.add( "L" );        set1.add( "M" );        set1.add( "N" );        System.out.println( "--> After adding 4 elements to set1:" );        set1.displaySet();        System.out.println( "--> Adding 1 element to set1" );        set1.add( "O" );        System.out.println( "--> After adding 1 more element to set1:" );        set1.displaySet();        System.out.println( "\n--> Creating set2 with the secondary constructor that takes an array as input" );        SetInterface< String > set2 = new ArraySetWithResizableArrayBag<>( inputData );        set2.displaySet();        System.out.println( "--> Adding more elements to set2" );        set2.add( "A" );        set2.add( "B" );        set2.add( "B" );        set2.add( "A" );        set2.add( "C" );        set2.add( "C" );        set2.add( "D" );        set2.add( "E" );        set2.add( "F" );        set2.add( "G" );        set2.add( "H" );        System.out.println( "--> set2 after adding:" );        set2.displaySet();        System.out.println( "\nTrying to add null entry" );        String nullEntry = null;        set2.add( nullEntry );        System.out.println( "--> set2 after adding:" );        set2.displaySet();    }} // end ArraySetWithResizableArrayBag