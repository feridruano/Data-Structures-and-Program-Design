import java.util.Stack;/** * <p/> * A class that creates an expression tree * from a postfix expression of binary operators * and one-letter operands. * * @author Ferid Ruano * @version 4/23/2019 */public class PostfixTree{    private BinaryNode< Character > root;    private final static String OPERATORS = "+-*/";    /**     * Default Constructor     */    public PostfixTree()    {        this.root = null;    } // end default constructor    /**     * Create a expression tree from postfix.     *     * @param postfix Java expression in postfix format.     */    public PostfixTree( String postfix )    {        // TODO Project 2 - Done        // This secondary constructor creates the postfix tree        // stack to put partial expressions on        Stack< BinaryNode< Character > > exprStack = new Stack<>();        // #1 repeat for every character in the postfix        int length = postfix.length() - 1;        for ( int index = 0; index <= length; index++ )        {            char character = postfix.charAt( index );            //  #2 create subExpression tree of type BinaryNode<Character> with the current character            BinaryNode< Character > subExpression = new BinaryNode<>( character );            // #3 if the current character is an operator            if ( OPERATORS.indexOf( character ) >= 0 )            {                // #3a get the operands from the stack                // #3b build up the subExpression by setting the left and right                // subtrees to the appropriate operands removed from the stack                subExpression.setRightChild( exprStack.pop() );                subExpression.setLeftChild( exprStack.pop() );            }            // #4 push subExpression on the stack            exprStack.push( subExpression );        }        // #5 At the end of it all the entire expression should be the        //    top expression on the stack, so remove it from the stack        //    and point root to it.        //    Note: that the input postfix string and the postorder output        //          should be the same.        this.root = exprStack.pop();        exprStack.clear(); // Remove exprStack entries    } // end constructor    /**     * Traverse expression tree in order. Utilizes a helper method.     */    public void inOrderTraversal()    {        inOrder( this.root );        System.out.println();    } // end inOrderTraversal    /**     * Helper method to traverse expression tree in order.     *     * @param node Root of expression tree.     */    private void inOrder( BinaryNode< Character > node )    {        if ( node != null )        {            inOrder( node.getLeftChild() );            System.out.print( node.getData() + " " );            inOrder( node.getRightChild() );        } // end if    } // end inOrder    /**     * Traverse expression tree in post order. Utilizes a helper method.     */    public void postOrderTraversal()    {        // TODO Project 2 - Done        postOrder( this.root );        System.out.println();    } // end postOrderTraversal    /**     * Helper method to traverse expression tree in post order.     *     * @param node Root of expression tree.     */    private void postOrder( BinaryNode< Character > node )    {        // TODO Project 2 - Done        if ( node != null )        {            postOrder( node.getLeftChild() );            postOrder( node.getRightChild() );            System.out.print( node.getData() + " " );        }    } // end postOrder    /**     * Main method     *     * @param args Array of arguments.     */    public static void main( String[] args )    {        String expression = "ab*c+";        System.out.println( "The first postfix expression is:\n" + expression );        PostfixTree tree = new PostfixTree( expression );        System.out.println( "\nThe inorder traversal is:" );        tree.inOrderTraversal();        System.out.println( "\nThe postorder traversal is:" );        tree.postOrderTraversal();        // . . .        expression = "ab-c*def-+g/+";        System.out.println( "\nThe second postfix expression is:\n" + expression );        tree = new PostfixTree( expression );        System.out.println( "\nThe inorder traversal is:" );        tree.inOrderTraversal();        System.out.println( "\nThe postorder traversal is:" );        tree.postOrderTraversal();    } // end main} // end PostfixTree		