import java.util.Arrays;/** * A class that implements the ADT set by using a chain of linked nodes. * The set is never full. * * @author Ferid Ruano * @version 2/5/2019 */public class LinkedSetWithChainOfNodes< T extends Comparable< ? super T > > implements SetInterface< T >{    private Node< T > firstNode;            // Head reference to first node    /**     * Default constructor     */    public LinkedSetWithChainOfNodes()    {        //TODO Project2 - Done        this.firstNode = null; // Set first node to null    } // end default constructor    /**     * Remove all nodes from chain     */    public void clear()    {        //TODO Project2 - Done        while ( this.firstNode != null )        { remove(); }    } // end clear    /**     * Add a node to the chain.     *     * @param newEntry Entry data to add to new node.     * @return True if successful, otherwise false.     */    public boolean add( T newEntry )    {        //TODO Project2 - Done        // Add new entry to the beginning of chain        if ( newEntry != null && !contains( newEntry ) )        {            Node< T > newNode = new Node<>( newEntry ); // Create a new node with entry            newNode.next = this.firstNode; // Make node reference rest of the chain            this.firstNode = newNode; // New node is the first node in chain        }        return true;    } // end add    /**     * Locates a given entry within this bag.     * Returns a reference to the node containing the entry, if located,     * or null otherwise.     * <p>     * Utilized by removeElement method     */    private Node< T > getReferenceTo( T anEntry )    {        //TODO Project2 - Done        boolean found = false; // Control Flag        Node< T > currentNode = this.firstNode; // Node used to iterate through chain        while ( !found && currentNode != null ) // Iterate until reference is found or null        {            if ( anEntry.equals( currentNode.data ) ) // Compare parameter to node data                found = true;            else                currentNode = currentNode.next; // Move to the next node in the chain        }        return currentNode; // Return reference    } // end getReferenceTo    /**     * Removes a specific entry in chain.     *     * @param anEntry Specific entry to remove.     * @return True if entry was remove, otherwise false.     */    public boolean removeElement( T anEntry )    {        //TODO Project2 - Done        boolean result = false;        Node< T > nodeRef = getReferenceTo( anEntry ); // Get it's reference, there is no need to implement redundant code        if ( nodeRef != null )        {            nodeRef.data = this.firstNode.data; // Replace located entry with firstNode data            this.firstNode = this.firstNode.next; // Remove firstNode from chain            result = true;        }        return result;    } // end remove    /**     * Remove firstNode from chain.     *     * @return Data from removed node.     */    public T remove()    {        //TODO Project2 - Done        T result = null;        if ( this.firstNode != null )        {            result = this.firstNode.data; // Get data from firstNode            this.firstNode = this.firstNode.next; // Remove firstNode        }        return result; // Return data from firstNode    } // end remove    /**     * Tests whether this bag contains a given entry.     *     * @param anEntry the entry to locate     * @return true if the bag contains anEntry, or false otherwise     */    public boolean contains( T anEntry )    {        //TODO Project2 - Done        return getReferenceTo( anEntry ) != null; // True if found, false if not found    } // end contains    /**     * Sees whether this bag is empty.     *     * @return true if the bag is empty, or false if not     */    public boolean isEmpty()    {        //TODO Project2 - Done        return this.firstNode == null;    } // end getLength    /**     * Retrieves all entries that are in this bag.     *     * @return a newly allocated array of all the entries in the bag     */    public T[] toArray()    {        //TODO Project2 - Done        int counter = 0;        Node< T > currentNode = this.firstNode;        // Count the number of entries in the chain        while ( currentNode != null )        {            counter++;            currentNode = currentNode.next;        }        T[] result = ( T[] ) new Comparable< ? >[counter];        int index = 0;        currentNode = this.firstNode;        while ( currentNode != null && index < result.length )        {            result[index] = currentNode.data;            index++;            currentNode = currentNode.next;        }        return result;    } // end toArray    // Displays a set.    public void displaySet()    {        //TODO Project2 - Done        if ( !isEmpty() )        {            Object[] toArray = toArray();            System.out.println( "There are " + toArray.length + " element(s) in the bag." );            for ( Object entry : toArray )                System.out.print( entry + " " );            System.out.println();        }        else            System.out.println( "The set is empty." );    } // end displaySet    // A class of nodes for a chain of linked nodes.    private class Node< S >    {        private S data; // Data portion        private Node next; // Link to next node        private Node( S dataPortion )        {            this( dataPortion, null );        } // end constructor        private Node( S dataPortion, Node nextNode )        {            this.data = dataPortion;            this.next = nextNode;        } // end constructor    } // end Node    public static void main( String[] args )    {        String[] inputData = { "A", "B", "C", "D", "A", "C", "B", "B" };        System.out.println(                "--> Creating aSet and adding to it elements from inputData: " + Arrays.toString( inputData ) );        SetInterface< String > aSet = new LinkedSetWithChainOfNodes<>();        for ( int i = 0; i < inputData.length; i++ )        {            aSet.add( inputData[i] );        }        aSet.displaySet();        System.out.println( "\n--> Clearing aSet" );        aSet.clear();        aSet.displaySet();        System.out.println( "--> aSet isEmpty returns: " + aSet.isEmpty() );        System.out.println( "\n--> Creating set1 and set2" );        SetInterface< String > set1 = new LinkedSetWithChainOfNodes<>();        SetInterface< String > set2 = new LinkedSetWithChainOfNodes<>();        System.out.println( "\n--> Adding elements to set1" );        set1.add( "A" );        set1.add( "A" );        set1.add( "B" );        set1.add( "A" );        set1.add( "C" );        set1.add( "A" );        System.out.println( "--> set1 after adding elements" );        set1.displaySet();        System.out.println( "\n--> Adding elements to set2" );        set2.add( "A" );        set2.add( "B" );        set2.add( "B" );        set2.add( "A" );        set2.add( "C" );        set2.add( "C" );        set2.add( "D" );        System.out.println( "--> set2 after adding elements" );        set2.displaySet();        System.out.println( "\n--> set1 contains \"A\": " + set1.contains( "A" ) );        System.out.println( "--> set1 contains \"E\": " + set1.contains( "E" ) );        System.out.println( "\n--> Removing \"B\" from set1" );        set1.removeElement( "B" );        System.out.println( "--> After removing \"B\" from set1, " );        set1.displaySet();        System.out.println( "\n--> Removing random element from set1" );        String removed = set1.remove();        System.out.println( "--> set1.remove() returned: \"" + removed + "\"" );        set1.displaySet();        System.out.println( "\n--> Removing \"A\" from set1" );        set1.removeElement( "A" );        System.out.println( "--> After removing \"A\" from set1, " );        set1.displaySet();        System.out.println( "\n--> Removing random element from set1" );        removed = set1.remove();        System.out.println( "--> set1.remove() returned: \"" + removed + "\"" );        set1.displaySet();        System.out.println( "\n--> Adding 4 elements to set1" );        set1.add( "K" );        set1.add( "L" );        set1.add( "M" );        set1.add( "N" );        System.out.println( "--> After adding 4 elements to set1:" );        set1.displaySet();        System.out.println( "\n--> Trying to add duplicate element \"N\" to set1" );        set1.add( "N" );        System.out.println( "--> After adding a duplicate element \"N\" to set1" );        set1.displaySet();        System.out.println( "\nTrying to add null entry" );        String nullEntry = null;        set1.add( nullEntry );        System.out.println( "--> set1 after adding:" );        set1.displaySet();    } // end main} // end LinkedSetWithChainOfNodes